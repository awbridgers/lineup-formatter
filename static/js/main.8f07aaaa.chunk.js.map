{"version":3,"sources":["roster.ts","util/parseLine.ts","util/findPlayer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["roster","parseLine","line","lineup","firstHalfArray","secondHalfArray","split","player1","player2","player3","player4","player5","data","map","x","replace","forEach","name","i","lastName","playerName","firstName","check","first","last","filter","length","firstNameCheck","substr","Error","findPlayer","push","trim","startHalf","startTimeString","endHalf","endTimeString","startTime","parseInt","endTime","sort","join","firstHalf","secondHalf","App","useState","setData","results","setResults","className","value","onChange","e","target","onClick","dataArray","match","resultsArray","index","findIndex","existingLineup","console","log","firstHalfResults","secondHalfResults","players","concat","headers","label","key","filename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f07aaaa.chunk.js","sourcesContent":["export const roster:string[] = [\r\n  \"Isaiah Mucius\",\r\n  \"Daivien Williamson\",\r\n  \"Jake LaRavia\",\r\n  \"Cameron Hildreth\",\r\n  \"Dallas Walton\",\r\n  \"Khadim Sy\",\r\n  \"Lucas Taylor\",\r\n  \"Robert McCray\",\r\n  \"Alondes Williams\",\r\n  \"Matthew Marsh\",\r\n  \"RJ Kennah\",\r\n  \"Luc Robinson\",\r\n  \"Anthony Mathis\",\r\n  \"Kevin Dunn\",\r\n  \"Damari Monsanto\",\r\n  \"Tariq Ingraham\",\r\n  \"Grant Van Beveren\",\r\n  \"Miles Lester\",\r\n  \"Carter Whitt\"\r\n];","import {Lineup} from '../types';\r\nimport {findPlayer} from './findPlayer';\r\n\r\nexport const parseLine = (line: string): Lineup => {\r\n  let lineup: string[] = [];\r\n  let firstHalfArray: number[] = [];\r\n  let secondHalfArray: number[] = [];\r\n  //separate out the players from the times\r\n  const [player1, player2, player3, player4, player5, data] = line.split('/');\r\n  //build the array for the lineup\r\n  const playersArray = [player1, player2, player3, player4, player5].map((x) =>\r\n    x.replace(/\\s?\\d+- /g, '')\r\n  );\r\n  //get the players\r\n  playersArray.forEach((name, i) => {\r\n    const [lastName, firstName] = name.split(' ');\r\n    const playerName = findPlayer(firstName, lastName);\r\n    lineup.push(playerName);\r\n  });\r\n  //now handle the data\r\n  const [startHalf, startTimeString, endHalf, endTimeString] = data.trim().split(' ');\r\n  const startTime = parseInt(startTimeString.replace(':',''),10);\r\n  const endTime = parseInt(endTimeString.replace(':',''),10);\r\n  //if it is the first half\r\n  if (startHalf === '1') {\r\n    if (endHalf === '1') {\r\n      //in and out in same half, just add the times\r\n      firstHalfArray = [startTime, endTime];\r\n    } else {\r\n      //play continues into the second half\r\n      if (endTime === 2000) {\r\n        //subbed out at the half\r\n        firstHalfArray = [startTime, 0];\r\n      } else {\r\n        //continued into the second half\r\n        firstHalfArray = [startTime, 0];\r\n        secondHalfArray = [2000, endTime];\r\n      }\r\n    }\r\n  }else{\r\n    //play in the 2nd half\r\n    secondHalfArray = [startTime, endTime];\r\n  }\r\n\r\n  return {\r\n    lineup: lineup.sort().join(','),\r\n    firstHalf: firstHalfArray,\r\n    secondHalf: secondHalfArray,\r\n  };\r\n};\r\n","import {roster} from '../roster';\r\n\r\nexport const findPlayer = (firstName: string, lastName: string): string => {\r\n  //break roster into first and last names\r\n  const splitRoster = roster.map((name) => {\r\n    const [first, last] = name.split(' ', 2);\r\n    return {first, last};\r\n  });\r\n  //now check the last names\r\n  const check = splitRoster.filter((x) => x.last === lastName);\r\n  if (check.length === 1) {\r\n    //1 name, must be the player\r\n    return `${check[0].first} ${check[0].last}`;\r\n  } else {\r\n    //need to check first name\r\n    const firstNameCheck = check.filter((x) => {\r\n      const start = x.first.substr(0, firstName.length);\r\n      return start === firstName;\r\n    });\r\n    if (firstNameCheck.length === 1) {\r\n      return `${firstNameCheck[0].first} ${firstNameCheck[0].last}`;\r\n    }\r\n  }\r\n  throw Error('No player matching that name found')\r\n};\r\n","import React, {useState} from 'react';\nimport {parseLine} from './util/parseLine';\nimport './App.css';\nimport {findPlayer} from './util/findPlayer';\nimport {Lineup} from './types';\nimport {CSVLink} from 'react-csv';\n\nconst App = () => {\n  const [data, setData] = useState<string>('');\n  const [results, setResults] = useState<Lineup[]>([]);\n  const submit = () => {\n    const noNewLines = data.replace(/\\n/g, ' ');\n    //this gives us the data we need line by line.\n    const dataArray = noNewLines.match(\n      /(\\d+- [a-zA-z]+ [a-zA-z]+\\/\\s?){5}(\\d \\d+:\\d+ ){2}\\d+:\\d+ \\d+-\\d+ (-?\\d+ ){5}\\d.\\d+/g\n    );\n    if (dataArray) {\n      let resultsArray: Lineup[] = [];\n      dataArray.forEach((line) => {\n        const lineup = parseLine(line);\n        const index = resultsArray.findIndex((x) => lineup.lineup === x.lineup);\n        if (index === -1) {\n          resultsArray.push(lineup);\n        } else {\n          //lineup exists, update the times\n          const existingLineup = resultsArray[index];\n          existingLineup.firstHalf = [\n            ...existingLineup.firstHalf,\n            ...lineup.firstHalf,\n          ];\n          existingLineup.secondHalf = [\n            ...existingLineup.secondHalf,\n            ...lineup.secondHalf,\n          ];\n        }\n      });\n      setResults(resultsArray);\n      console.log(resultsArray);\n    }\n  };\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setData(e.target.value);\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"form\">\n        <textarea className=\"textInput\" value={data} onChange={handleChange} />\n        <button onClick={submit} className=\"submit\">\n          Submit\n        </button>\n        {results.length > 1 && (\n          <button className=\"csv\">\n            <CSVLink\n              data={results\n                .map((lineup) => {\n                  const firstHalfResults =\n                    lineup.firstHalf.length > 0\n                      ? lineup.firstHalf.join('-')\n                      : ['none'];\n                  const secondHalfResults =\n                    lineup.secondHalf.length > 0\n                      ? lineup.secondHalf.join('-')\n                      : ['none'];\n                  return {\n                    players: lineup.lineup,\n                    firstHalf: firstHalfResults,\n                    secondHalf: secondHalfResults,\n                  };\n                })\n                .concat([\n                  {\n                    players: 'FT sub Shooter',\n                    firstHalf: ['none'],\n                    secondHalf: ['none'],\n                  },\n                ])}\n              headers={[\n                {label: 'Lineup', key: 'players'},\n                {label: 'First Half', key: 'firstHalf'},\n                {label: 'Second Half', key: 'secondHalf'},\n              ]}\n              filename=\"lineups.csv\"\n            >\n              Download{' '}\n            </CSVLink>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}